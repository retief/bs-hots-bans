// Generated by BUCKLESCRIPT VERSION 1.7.5, PLEASE EDIT WITH CARE
'use strict';

var Util  = require("../common/util.js");
var Curry = require("bs-platform/lib/js/curry.js");

function $great$great$eq(v, f) {
  if (v) {
    return Curry._1(f, v[0]);
  } else {
    return /* Nothing */0;
  }
}

function pure(x) {
  return /* Just */[x];
}

var Maybe = /* module */[
  /* >>= */$great$great$eq,
  /* pure */pure
];

function $great$great$eq$1(l, f) {
  return Curry._1(Util.List[/* concat */52], Curry._2(Util.List[/* map */42], f, l));
}

function pure$1(v) {
  return /* :: */[
          v,
          /* [] */0
        ];
}

var ListM = /* module */[
  /* >>= */$great$great$eq$1,
  /* pure */pure$1
];

function MComb(M) {
  var $great$great$eq = M[0];
  var $great$great = function (a, b) {
    return Curry._2($great$great$eq, a, (function () {
                  return b;
                }));
  };
  var $eq$less$less = function (f, v) {
    return Curry._2($great$great$eq, v, f);
  };
  return /* module */[
          /* >>= */$great$great$eq,
          /* pure */M[1],
          /* >> */$great$great,
          /* =<< */$eq$less$less
        ];
}

var l1 = /* :: */[
  1,
  /* :: */[
    2,
    /* :: */[
      3,
      /* :: */[
        4,
        /* [] */0
      ]
    ]
  ]
];

var l2 = /* :: */[
  5,
  /* :: */[
    6,
    /* :: */[
      7,
      /* :: */[
        8,
        /* [] */0
      ]
    ]
  ]
];

var res = $great$great$eq$1(l1, (function (v1) {
        return $great$great$eq$1(l2, (function (v2) {
                      return /* :: */[
                              v1 + v2 | 0,
                              /* [] */0
                            ];
                    }));
      }));

function $great$great(a, b) {
  return $great$great$eq$1(a, (function () {
                return b;
              }));
}

function $eq$less$less(f, v) {
  return $great$great$eq$1(v, f);
}

var ListComb = /* module */[
  /* >>= */$great$great$eq$1,
  /* pure */pure$1,
  /* >> */$great$great,
  /* =<< */$eq$less$less
];

var res$prime = $great$great$eq$1(l1, (function (v1) {
        return $great$great$eq$1(l2, (function (v2) {
                      return /* :: */[
                              v1 + v2 | 0,
                              /* [] */0
                            ];
                    }));
      }));

function first(param) {
  if (param) {
    return /* Just */[param[0]];
  } else {
    return /* Nothing */0;
  }
}

var res$prime$prime = $great$great$eq(first(/* :: */[
          1,
          /* [] */0
        ]), (function () {
        return /* Nothing */0;
      }));

console.log(res);

console.log(res$prime);

console.log(res$prime$prime);

console.log(Curry._1(Util.List[/* length */0], res));

console.log(Curry._1(Util.List[/* length */0], Curry._2(Util.List[/* replicate */55], 10, "a")));

exports.Maybe           = Maybe;
exports.ListM           = ListM;
exports.MComb           = MComb;
exports.l1              = l1;
exports.l2              = l2;
exports.res             = res;
exports.ListComb        = ListComb;
exports.res$prime       = res$prime;
exports.first           = first;
exports.res$prime$prime = res$prime$prime;
/* res Not a pure module */
