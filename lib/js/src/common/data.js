// Generated by BUCKLESCRIPT VERSION 1.8.0, PLEASE EDIT WITH CARE
'use strict';

var Curry       = require("bs-platform/lib/js/curry.js");
var Util_json   = require("./util/util_json.js");
var Util_option = require("./util/util_option.js");

function make(name, group) {
  return /* record */[
          /* name */name,
          /* group */group
        ];
}

function from_json(j) {
  return Util_option.$great$great$eq(Util_json.jdict_of_json(j), (function (dict) {
                return Curry._2(Util_option.$less$star$great, Curry._2(Util_option.$less$$great, make, Curry._2(Util_json.$$String[/* @. */5], dict, "PrimaryName")), Curry._2(Util_json.$$String[/* @. */5], dict, "Group"));
              }));
}

function to_json(param) {
  return Util_json.jobj_of_list(/* :: */[
              /* tuple */[
                "PrimaryName",
                Curry._1(Util_json.$$String[/* to_json */1], param[/* name */0])
              ],
              /* :: */[
                /* tuple */[
                  "Group",
                  Curry._1(Util_json.$$String[/* to_json */1], param[/* group */1])
                ],
                /* [] */0
              ]
            ]);
}

var Hero = Util_json.Extend(/* module */[
      /* from_json */from_json,
      /* to_json */to_json
    ]);

function make_hd(name, map, games, winrate) {
  return /* record */[
          /* name */name,
          /* map */map,
          /* games */games,
          /* winrate */winrate,
          /* power */games * (winrate - 50) | 0
        ];
}

function from_json$1(j) {
  return Util_option.$great$great$eq(Util_json.jdict_of_json(j), (function (dict) {
                return Curry._2(Util_option.$less$star$great, Curry._2(Util_option.$less$star$great, Curry._2(Util_option.$less$star$great, Curry._2(Util_option.$less$$great, make_hd, Curry._2(Util_json.$$String[/* get */4], dict, "name")), Curry._2(Util_json.$$String[/* get */4], dict, "map")), Curry._2(Util_json.Int[/* get */4], dict, "games")), Curry._2(Util_json.Float[/* get */4], dict, "winrate"));
              }));
}

function to_json$1(param) {
  return Util_json.jobj_of_list(/* :: */[
              /* tuple */[
                "name",
                Curry._1(Util_json.$$String[/* to_json */1], param[/* name */0])
              ],
              /* :: */[
                /* tuple */[
                  "map",
                  Curry._1(Util_json.$$String[/* to_json */1], param[/* map */1])
                ],
                /* :: */[
                  /* tuple */[
                    "games",
                    Curry._1(Util_json.Int[/* to_json */1], param[/* games */2])
                  ],
                  /* :: */[
                    /* tuple */[
                      "winrate",
                      Curry._1(Util_json.Float[/* to_json */1], param[/* winrate */3])
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ]);
}

var Hero_detail = Util_json.Extend(/* module */[
      /* from_json */from_json$1,
      /* to_json */to_json$1
    ]);

var Hero_list = Util_json.List([
      Hero[0],
      Hero[1]
    ]);

var Hero_detail_list = Util_json.List([
      Hero_detail[0],
      Hero_detail[1]
    ]);

function from_json$2(j) {
  return Util_option.$great$great$eq(Util_json.jdict_of_json(j), (function (dict) {
                return Util_option.$great$great$eq(Curry._2(Hero_list[/* get */4], dict, "heroes"), (function (heroes) {
                              return Util_option.$great$great$eq(Curry._2(Hero_detail_list[/* get */4], dict, "details"), (function (details) {
                                            return Util_option.$great$great$eq(Curry._2(Util_json.Float[/* get */4], dict, "time"), (function (time) {
                                                          return Util_option.pure(/* record */[
                                                                      /* heroes */heroes,
                                                                      /* details */details,
                                                                      /* time */time
                                                                    ]);
                                                        }));
                                          }));
                            }));
              }));
}

function to_json$2(param) {
  return Util_json.jobj_of_list(/* :: */[
              /* tuple */[
                "heroes",
                Curry._1(Hero_list[/* to_json */1], param[/* heroes */0])
              ],
              /* :: */[
                /* tuple */[
                  "details",
                  Curry._1(Hero_detail_list[/* to_json */1], param[/* details */1])
                ],
                /* :: */[
                  /* tuple */[
                    "time",
                    Curry._1(Util_json.Float[/* to_json */1], param[/* time */2])
                  ],
                  /* [] */0
                ]
              ]
            ]);
}

var Hero_data = Util_json.Extend(/* module */[
      /* from_json */from_json$2,
      /* to_json */to_json$2
    ]);

exports.Hero        = Hero;
exports.make_hd     = make_hd;
exports.Hero_detail = Hero_detail;
exports.Hero_data   = Hero_data;
/* Hero Not a pure module */
