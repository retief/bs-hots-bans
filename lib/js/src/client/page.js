// Generated by BUCKLESCRIPT VERSION 1.8.0, PLEASE EDIT WITH CARE
'use strict';

var $$Map       = require("bs-platform/lib/js/map.js");
var Util        = require("../common/util/util.js");
var Block       = require("bs-platform/lib/js/block.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var React       = require("react");
var Caml_obj    = require("bs-platform/lib/js/caml_obj.js");
var Util_list   = require("../common/util/util_list.js");
var Js_boolean  = require("bs-platform/lib/js/js_boolean.js");
var Pervasives  = require("bs-platform/lib/js/pervasives.js");
var ReasonReact = require("reason-react/lib/js/src/reasonReact.js");
var Util_option = require("../common/util/util_option.js");

var compare = Caml_obj.caml_compare;

var String_map = $$Map.Make(/* module */[/* compare */compare]);

function folder(map, str) {
  return Curry._3(String_map[/* add */3], str, /* true */1, map);
}

var partial_arg = String_map[/* empty */0];

function make_map(param) {
  return Util_list.fold_left(folder, partial_arg, param);
}

var partial_arg$1 = String_map[/* bindings */16];

var partial_arg$2 = Curry._1(Util_list.map, (function (param) {
        return param[0];
      }));

function partial_arg$3(param) {
  return Util.$percent(partial_arg$2, partial_arg$1, param);
}

function uniq(param) {
  return Util.$percent(partial_arg$3, make_map, param);
}

function get_hero_rows(param, param$1) {
  var current_classes = param$1[/* current_classes */1];
  var current_map = param$1[/* current_map */0];
  var heroes = Util.debug(make_map(Util_option.map_concat((function (h) {
                  return Util_list.some_option((function (param) {
                                var h$1 = h;
                                var c = param;
                                if (c === h$1[/* group */1]) {
                                  return /* Some */[h$1[/* name */0]];
                                } else {
                                  return /* None */0;
                                }
                              }), current_classes);
                }), param[/* heroes */0])));
  var matches = function (d) {
    if (d[/* map */1] === current_map) {
      return Curry._2(String_map[/* mem */2], d[/* name */0], heroes);
    } else {
      return /* false */0;
    }
  };
  return Util_list.sort((function (param, param$1) {
                return Util.flip((function (param, param$1) {
                              return Util.on(Caml_obj.caml_compare, (function (param) {
                                            return param[/* power */4];
                                          }), param, param$1);
                            }), param, param$1);
              }), Util_list.filter(matches, param[/* details */1]));
}

var component = ReasonReact.statefulComponent("Page");

function lit_string(prim) {
  return prim;
}

var partial_arg$4 = Util.$$Array[/* of_list */10];

function list_el(param) {
  return Util.$percent((function (prim) {
                return prim;
              }), partial_arg$4, param);
}

function get_target(el) {
  return el.target;
}

function make(data, _) {
  var all_maps = uniq(Curry._2(Util_list.map, (function (param) {
              return param[/* map */1];
            }), data[/* details */1]));
  var all_classes = uniq(Curry._2(Util_list.map, (function (param) {
              return param[/* group */1];
            }), data[/* heroes */0]));
  var set_map = function ($$event, state, _) {
    var target = $$event.target;
    var value = Util.$pipe$unknown$great(target, (function (o) {
            return o.value;
          }));
    return Util_option.map_default(/* NoUpdate */0, (function (new_map) {
                  return /* Update */Block.__(0, [/* record */[
                              /* current_map */new_map,
                              /* current_classes */state[/* current_classes */1]
                            ]]);
                }), value);
  };
  var set_class = function ($$event, state, _) {
    var target = $$event.target;
    var current_classes = state[/* current_classes */1];
    var new_classes = Util_option.$great$great$eq(Util.$pipe$unknown$great(target, (function (o) {
                return o.value;
              })), (function (value) {
            return Util_option.$great$great$eq(Util.$pipe$unknown$great(target, (function (o) {
                              return o.checked;
                            })), (function (checked) {
                          var filtered = Util_list.filter((function (param) {
                                  return Caml_obj.caml_notequal(value, param);
                                }), current_classes);
                          var match = +checked;
                          return Util_option.pure(match !== 0 ? /* :: */[
                                        value,
                                        filtered
                                      ] : filtered);
                        }));
          }));
    return Util_option.map_default(/* NoUpdate */0, (function (nc) {
                  return /* Update */Block.__(0, [/* record */[
                              /* current_map */state[/* current_map */0],
                              /* current_classes */nc
                            ]]);
                }), new_classes);
  };
  var header = React.createElement("h3", undefined, "Hots Bans");
  var map_options = Curry._2(Util_list.map, (function (m) {
          return React.createElement("option", {
                      key: m,
                      value: m
                    }, m);
        }), all_maps);
  var class_options = function (self, selected) {
    return Curry._2(Util_list.map, (function (c) {
                  return list_el(/* :: */[
                              React.createElement("label", {
                                    key: c + "la",
                                    htmlFor: "class_select_" + c
                                  }, c + ":"),
                              /* :: */[
                                React.createElement("input", {
                                      key: c + "in",
                                      id: "class_select_" + c,
                                      checked: Js_boolean.to_js_boolean(Util_list.some((function (param) {
                                                  return Caml_obj.caml_equal(c, param);
                                                }), selected)),
                                      type: "checkbox",
                                      value: c,
                                      onChange: Curry._1(self[/* update */2], set_class)
                                    }),
                                /* [] */0
                              ]
                            ]);
                }), all_classes);
  };
  var filter_bar = function (self, classes) {
    return React.createElement("form", undefined, React.createElement("label", {
                    htmlFor: "map_select"
                  }, "Select Map:"), React.createElement("select", {
                    id: "map_select",
                    onChange: Curry._1(self[/* update */2], set_map)
                  }, list_el(map_options)), list_el(class_options(self, classes)));
  };
  var make_row = function (param) {
    var name = param[/* name */0];
    return React.createElement("tr", {
                key: name + param[/* map */1]
              }, React.createElement("td", undefined, name), React.createElement("td", undefined, Pervasives.string_of_int(param[/* games */2])), React.createElement("td", undefined, Pervasives.string_of_float(param[/* winrate */3])), React.createElement("td", undefined, Pervasives.string_of_int(param[/* power */4])));
  };
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (state, self) {
      var rows = Util.debug(get_hero_rows(data, state));
      return React.createElement("div", undefined, header, filter_bar(self, state[/* current_classes */1]), React.createElement("table", undefined, React.createElement("thead", undefined, React.createElement("tr", undefined, React.createElement("td", undefined, "Name"), React.createElement("td", undefined, "Games"), React.createElement("td", undefined, "Winrate"), React.createElement("td", undefined, "Power"))), React.createElement("tbody", undefined, list_el(Curry._2(Util_list.map, make_row, rows)))));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* current_map */"Battlefield of Eternity",
              /* current_classes */all_classes
            ];
    });
  return newrecord;
}

exports.String_map    = String_map;
exports.folder        = folder;
exports.make_map      = make_map;
exports.uniq          = uniq;
exports.get_hero_rows = get_hero_rows;
exports.component     = component;
exports.lit_string    = lit_string;
exports.list_el       = list_el;
exports.get_target    = get_target;
exports.make          = make;
/* String_map Not a pure module */
