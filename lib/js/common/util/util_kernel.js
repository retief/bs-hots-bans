// Generated by BUCKLESCRIPT VERSION 1.7.5, PLEASE EDIT WITH CARE
'use strict';

var List  = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");

function fold_right(f, l, accu) {
  return List.fold_left((function (a, b) {
                return Curry._2(f, b, a);
              }), accu, List.rev(l));
}

function flip(f, a, b) {
  return Curry._2(f, b, a);
}

function compose(f, g, x) {
  return Curry._1(f, Curry._1(g, x));
}

function slow_map(f, l) {
  return List.rev(List.rev_map(f, l));
}

function count_map(f, l, count) {
  if (l) {
    var match = l[1];
    var v1 = l[0];
    if (match) {
      var match$1 = match[1];
      var v2 = match[0];
      if (match$1) {
        var match$2 = match$1[1];
        var v3 = match$1[0];
        if (match$2) {
          var match$3 = match$2[1];
          var v4 = match$2[0];
          if (match$3) {
            var tl = match$3[1];
            var v5 = match$3[0];
            if (tl) {
              var match$4 = +(count > 1000);
              return /* :: */[
                      Curry._1(f, v1),
                      /* :: */[
                        Curry._1(f, v2),
                        /* :: */[
                          Curry._1(f, v3),
                          /* :: */[
                            Curry._1(f, v4),
                            /* :: */[
                              Curry._1(f, v5),
                              match$4 !== 0 ? List.rev(List.rev_map(f, tl)) : count_map(f, tl, count + 1 | 0)
                            ]
                          ]
                        ]
                      ]
                    ];
            } else {
              return /* :: */[
                      Curry._1(f, v1),
                      /* :: */[
                        Curry._1(f, v2),
                        /* :: */[
                          Curry._1(f, v3),
                          /* :: */[
                            Curry._1(f, v4),
                            /* :: */[
                              Curry._1(f, v5),
                              /* [] */0
                            ]
                          ]
                        ]
                      ]
                    ];
            }
          } else {
            return /* :: */[
                    Curry._1(f, v1),
                    /* :: */[
                      Curry._1(f, v2),
                      /* :: */[
                        Curry._1(f, v3),
                        /* :: */[
                          Curry._1(f, v4),
                          /* [] */0
                        ]
                      ]
                    ]
                  ];
          }
        } else {
          return /* :: */[
                  Curry._1(f, v1),
                  /* :: */[
                    Curry._1(f, v2),
                    /* :: */[
                      Curry._1(f, v3),
                      /* [] */0
                    ]
                  ]
                ];
        }
      } else {
        return /* :: */[
                Curry._1(f, v1),
                /* :: */[
                  Curry._1(f, v2),
                  /* [] */0
                ]
              ];
      }
    } else {
      return /* :: */[
              Curry._1(f, v1),
              /* [] */0
            ];
    }
  } else {
    return /* [] */0;
  }
}

function map(f, l) {
  return count_map(f, l, 0);
}

var fold_left = List.fold_left;

var stack_max = 1000;

exports.fold_right = fold_right;
exports.fold_left  = fold_left;
exports.flip       = flip;
exports.compose    = compose;
exports.stack_max  = stack_max;
exports.slow_map   = slow_map;
exports.count_map  = count_map;
exports.map        = map;
/* No side effect */
