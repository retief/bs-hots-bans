// Generated by BUCKLESCRIPT VERSION 1.7.5, PLEASE EDIT WITH CARE
'use strict';

var Curry       = require("bs-platform/lib/js/curry.js");
var Pervasives  = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Util_kernel = require("./util_kernel.js");

function debug(v) {
  console.log(v);
  return v;
}

function $$const(x, _) {
  return x;
}

function on(c, f, a, b) {
  return Curry._2(c, Curry._1(f, a), Curry._1(f, b));
}

function neg(f, x) {
  return 1 - Curry._1(f, x);
}

function try_apply(f, x) {
  try {
    return /* Some */[Curry._1(f, x)];
  }
  catch (exn){
    return /* None */0;
  }
}

function $pipe$unknown$great(x, f) {
  return try_apply(f, x);
}

function bool_of_string_safe(s) {
  return try_apply(Pervasives.bool_of_string, s);
}

function int_of_string_safe(s) {
  return try_apply(Caml_format.caml_int_of_string, s);
}

function float_of_string_safe(s) {
  return try_apply(Caml_format.caml_float_of_string, s);
}

var flip = Util_kernel.flip;

var $percent = Util_kernel.compose;

var compose = Util_kernel.compose;

exports.debug                = debug;
exports.flip                 = flip;
exports.$percent             = $percent;
exports.compose              = compose;
exports.$$const              = $$const;
exports.on                   = on;
exports.neg                  = neg;
exports.try_apply            = try_apply;
exports.$pipe$unknown$great  = $pipe$unknown$great;
exports.bool_of_string_safe  = bool_of_string_safe;
exports.int_of_string_safe   = int_of_string_safe;
exports.float_of_string_safe = float_of_string_safe;
/* No side effect */
