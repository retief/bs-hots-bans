// Generated by BUCKLESCRIPT VERSION 1.7.5, PLEASE EDIT WITH CARE
'use strict';

var List  = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");

function debug(v) {
  console.log(v);
  return v;
}

function hd(param) {
  if (param) {
    return /* Some */[param[0]];
  } else {
    return /* None */0;
  }
}

function tl(param) {
  if (param) {
    return /* Some */[param[1]];
  } else {
    return /* None */0;
  }
}

function nth(t, n) {
  if (n < 0) {
    return /* None */0;
  } else {
    var _t = t;
    var _n = n;
    while(true) {
      var n$1 = _n;
      var t$1 = _t;
      if (t$1) {
        var match = +(n$1 === 0);
        if (match !== 0) {
          return /* Some */[t$1[0]];
        } else {
          _n = n$1 - 1 | 0;
          _t = t$1[1];
          continue ;
          
        }
      } else {
        return /* None */0;
      }
    };
  }
}

function slow_append(l, l$prime) {
  return List.rev_append(List.rev(l), l$prime);
}

function count_append(l, l$prime, count) {
  if (l$prime) {
    if (l) {
      var match = l[1];
      var v1 = l[0];
      if (match) {
        var match$1 = match[1];
        var v2 = match[0];
        if (match$1) {
          var match$2 = match$1[1];
          var v3 = match$1[0];
          if (match$2) {
            var match$3 = match$2[1];
            var v4 = match$2[0];
            if (match$3) {
              var tl = match$3[1];
              var v5 = match$3[0];
              if (tl) {
                var match$4 = +(count > 1000);
                return /* :: */[
                        v1,
                        /* :: */[
                          v2,
                          /* :: */[
                            v3,
                            /* :: */[
                              v4,
                              /* :: */[
                                v5,
                                match$4 !== 0 ? List.rev_append(List.rev(tl), l$prime) : count_append(tl, l$prime, count + 1 | 0)
                              ]
                            ]
                          ]
                        ]
                      ];
              } else {
                return /* :: */[
                        v1,
                        /* :: */[
                          v2,
                          /* :: */[
                            v3,
                            /* :: */[
                              v4,
                              /* :: */[
                                v5,
                                l$prime
                              ]
                            ]
                          ]
                        ]
                      ];
              }
            } else {
              return /* :: */[
                      v1,
                      /* :: */[
                        v2,
                        /* :: */[
                          v3,
                          /* :: */[
                            v4,
                            l$prime
                          ]
                        ]
                      ]
                    ];
            }
          } else {
            return /* :: */[
                    v1,
                    /* :: */[
                      v2,
                      /* :: */[
                        v3,
                        l$prime
                      ]
                    ]
                  ];
          }
        } else {
          return /* :: */[
                  v1,
                  /* :: */[
                    v2,
                    l$prime
                  ]
                ];
        }
      } else {
        return /* :: */[
                v1,
                l$prime
              ];
      }
    } else {
      return l$prime;
    }
  } else {
    return l;
  }
}

function append(l, l$prime) {
  return count_append(l, l$prime, 0);
}

function slow_map(f, l) {
  return List.rev(List.rev_map(f, l));
}

function count_map(f, l, count) {
  if (l) {
    var match = l[1];
    var v1 = l[0];
    if (match) {
      var match$1 = match[1];
      var v2 = match[0];
      if (match$1) {
        var match$2 = match$1[1];
        var v3 = match$1[0];
        if (match$2) {
          var match$3 = match$2[1];
          var v4 = match$2[0];
          if (match$3) {
            var tl = match$3[1];
            var v5 = match$3[0];
            if (tl) {
              var match$4 = +(count > 1000);
              return /* :: */[
                      Curry._1(f, v1),
                      /* :: */[
                        Curry._1(f, v2),
                        /* :: */[
                          Curry._1(f, v3),
                          /* :: */[
                            Curry._1(f, v4),
                            /* :: */[
                              Curry._1(f, v5),
                              match$4 !== 0 ? List.rev(List.rev_map(f, tl)) : count_map(f, tl, count + 1 | 0)
                            ]
                          ]
                        ]
                      ]
                    ];
            } else {
              return /* :: */[
                      Curry._1(f, v1),
                      /* :: */[
                        Curry._1(f, v2),
                        /* :: */[
                          Curry._1(f, v3),
                          /* :: */[
                            Curry._1(f, v4),
                            /* :: */[
                              Curry._1(f, v5),
                              /* [] */0
                            ]
                          ]
                        ]
                      ]
                    ];
            }
          } else {
            return /* :: */[
                    Curry._1(f, v1),
                    /* :: */[
                      Curry._1(f, v2),
                      /* :: */[
                        Curry._1(f, v3),
                        /* :: */[
                          Curry._1(f, v4),
                          /* [] */0
                        ]
                      ]
                    ]
                  ];
          }
        } else {
          return /* :: */[
                  Curry._1(f, v1),
                  /* :: */[
                    Curry._1(f, v2),
                    /* :: */[
                      Curry._1(f, v3),
                      /* [] */0
                    ]
                  ]
                ];
        }
      } else {
        return /* :: */[
                Curry._1(f, v1),
                /* :: */[
                  Curry._1(f, v2),
                  /* [] */0
                ]
              ];
      }
    } else {
      return /* :: */[
              Curry._1(f, v1),
              /* [] */0
            ];
    }
  } else {
    return /* [] */0;
  }
}

function map(f, l) {
  return count_map(f, l, 0);
}

function slow_filter(p, _l, _acc) {
  while(true) {
    var acc = _acc;
    var l = _l;
    if (l) {
      var tl = l[1];
      var v = l[0];
      var match = p(v);
      if (match !== 0) {
        _acc = /* :: */[
          v,
          acc
        ];
        _l = tl;
        continue ;
        
      } else {
        _l = tl;
        continue ;
        
      }
    } else {
      return acc;
    }
  };
}

function count_filter(i, p, _l) {
  while(true) {
    var l = _l;
    if (l) {
      if (i > 1000) {
        return List.rev(slow_filter(p, l, /* [] */0));
      } else {
        var tl = l[1];
        var v = l[0];
        var match = p(v);
        if (match !== 0) {
          return /* :: */[
                  v,
                  count_filter(i - 1 | 0, p, tl)
                ];
        } else {
          _l = tl;
          continue ;
          
        }
      }
    } else {
      return /* [] */0;
    }
  };
}

function filter(p, l) {
  return count_filter(0, p, l);
}

function slow_map_option(p, _l, _acc) {
  while(true) {
    var acc = _acc;
    var l = _l;
    if (l) {
      var tl = l[1];
      var match = p(l[0]);
      if (match) {
        _acc = /* :: */[
          match[0],
          acc
        ];
        _l = tl;
        continue ;
        
      } else {
        _l = tl;
        continue ;
        
      }
    } else {
      return acc;
    }
  };
}

function count_map_option(i, p, _l) {
  while(true) {
    var l = _l;
    if (l) {
      if (i > 1000) {
        return List.rev(slow_map_option(p, l, /* [] */0));
      } else {
        var tl = l[1];
        var match = p(l[0]);
        if (match) {
          return /* :: */[
                  match[0],
                  count_map_option(i - 1 | 0, p, tl)
                ];
        } else {
          _l = tl;
          continue ;
          
        }
      }
    } else {
      return /* [] */0;
    }
  };
}

function map_option(p, l) {
  return count_map_option(0, p, l);
}

function rev_mapi(f, l) {
  var _i = 0;
  var _res = /* [] */0;
  var _param = l;
  while(true) {
    var param = _param;
    var res = _res;
    var i = _i;
    if (param) {
      _param = param[1];
      _res = /* :: */[
        Curry._2(f, i, param[0]),
        /* [] */0
      ];
      _i = i + 1 | 0;
      continue ;
      
    } else {
      return res;
    }
  };
}

function mapi(f, l) {
  return List.rev(rev_mapi(f, l));
}

function fold_right(f, l, accu) {
  if (l) {
    return List.fold_left((function (a, b) {
                  return Curry._2(f, b, a);
                }), accu, List.rev(l));
  } else {
    return accu;
  }
}

function concat(l) {
  return fold_right(append, l, /* [] */0);
}

function map2(f, l1, l2) {
  return List.rev(List.rev_map2(f, l1, l2));
}

function fold_right2(f, l1, l2, accu) {
  return List.fold_left2((function (a, b, c) {
                return Curry._3(f, b, c, a);
              }), accu, l1, l2);
}

function replicate(n, v) {
  var _i = n;
  var _res = /* [] */0;
  while(true) {
    var res = _res;
    var i = _i;
    var match = +(i <= 0);
    if (match !== 0) {
      return res;
    } else {
      _res = /* :: */[
        v,
        res
      ];
      _i = i - 1 | 0;
      continue ;
      
    }
  };
}

function some_option(f, _param) {
  while(true) {
    var param = _param;
    if (param) {
      var v$prime = Curry._1(f, param[0]);
      if (v$prime) {
        return v$prime;
      } else {
        _param = param[1];
        continue ;
        
      }
    } else {
      return /* None */0;
    }
  };
}

function some(f, _param) {
  while(true) {
    var param = _param;
    if (param) {
      var match = Curry._1(f, param[0]);
      if (match !== 0) {
        return /* true */1;
      } else {
        _param = param[1];
        continue ;
        
      }
    } else {
      return /* false */0;
    }
  };
}

function all(f, _param) {
  while(true) {
    var param = _param;
    if (param) {
      var match = Curry._1(f, param[0]);
      if (match !== 0) {
        _param = param[1];
        continue ;
        
      } else {
        return /* false */0;
      }
    } else {
      return /* true */1;
    }
  };
}

function merge(cmp, l1, l2) {
  var _acc = /* [] */0;
  var _l1 = l1;
  var _l2 = l2;
  while(true) {
    var l2$1 = _l2;
    var l1$1 = _l1;
    var acc = _acc;
    if (l1$1) {
      if (l2$1) {
        var h2 = l2$1[0];
        var h1 = l1$1[0];
        var match = +(Curry._2(cmp, h1, h2) <= 0);
        if (match !== 0) {
          _l1 = l1$1[1];
          _acc = /* :: */[
            h1,
            acc
          ];
          continue ;
          
        } else {
          _l2 = l2$1[1];
          _acc = /* :: */[
            h2,
            acc
          ];
          continue ;
          
        }
      } else {
        return List.rev_append(acc, l1$1);
      }
    } else {
      return List.rev_append(acc, l2$1);
    }
  };
}

function range($staropt$star, stop) {
  var start = $staropt$star ? $staropt$star[0] : 0;
  if (start >= stop) {
    return /* [] */0;
  } else {
    var _n = stop - 1 | 0;
    var _accu = /* [] */0;
    while(true) {
      var accu = _accu;
      var n = _n;
      var match = +(n < start);
      if (match !== 0) {
        return accu;
      } else {
        _accu = /* :: */[
          n,
          accu
        ];
        _n = n - 1 | 0;
        continue ;
        
      }
    };
  }
}

var List$1 = /* module */[
  /* length */List.length,
  /* rev */List.rev,
  /* rev_append */List.rev_append,
  /* flatten */List.flatten,
  /* iter */List.iter,
  /* iteri */List.iteri,
  /* rev_map */List.rev_map,
  /* fold_left */List.fold_left,
  /* iter2 */List.iter2,
  /* rev_map2 */List.rev_map2,
  /* fold_left2 */List.fold_left2,
  /* for_all */List.for_all,
  /* exists */List.exists,
  /* for_all2 */List.for_all2,
  /* exists2 */List.exists2,
  /* mem */List.mem,
  /* memq */List.memq,
  /* find */List.find,
  /* find_all */List.find_all,
  /* partition */List.partition,
  /* assoc */List.assoc,
  /* assq */List.assq,
  /* mem_assoc */List.mem_assoc,
  /* mem_assq */List.mem_assq,
  /* remove_assoc */List.remove_assoc,
  /* remove_assq */List.remove_assq,
  /* split */List.split,
  /* combine */List.combine,
  /* sort */List.sort,
  /* stable_sort */List.stable_sort,
  /* fast_sort */List.fast_sort,
  /* sort_uniq */List.sort_uniq,
  /* hd */hd,
  /* tl */tl,
  /* nth */nth,
  /* stack_max */1000,
  /* slow_append */slow_append,
  /* count_append */count_append,
  /* append */append,
  /* @ */append,
  /* slow_map */slow_map,
  /* count_map */count_map,
  /* map */map,
  /* slow_filter */slow_filter,
  /* count_filter */count_filter,
  /* filter */filter,
  /* slow_map_option */slow_map_option,
  /* count_map_option */count_map_option,
  /* map_option */map_option,
  /* rev_mapi */rev_mapi,
  /* mapi */mapi,
  /* fold_right */fold_right,
  /* concat */concat,
  /* map2 */map2,
  /* fold_right2 */fold_right2,
  /* replicate */replicate,
  /* some_option */some_option,
  /* some */some,
  /* all */all,
  /* merge */merge,
  /* range */range
];

exports.debug = debug;
exports.List  = List$1;
/* No side effect */
