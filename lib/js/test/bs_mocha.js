// Generated by BUCKLESCRIPT VERSION 1.7.5, PLEASE EDIT WITH CARE
'use strict';

var List       = require("bs-platform/lib/js/list.js");
var Curry      = require("bs-platform/lib/js/curry.js");
var Assert     = require("assert");
var Js_boolean = require("bs-platform/lib/js/js_boolean.js");

function assert_equal(prim, prim$1) {
  Assert.deepEqual(prim, prim$1);
  return /* () */0;
}

function assert_notequal(prim, prim$1) {
  Assert.notDeepEqual(prim, prim$1);
  return /* () */0;
}

function assert_ok(a) {
  Assert.ok(Js_boolean.to_js_boolean(a));
  return /* () */0;
}

function assert_fail(msg) {
  Assert.fail(/* () */0, /* () */0, msg, "");
  return /* () */0;
}

function from_suites(name, suite) {
  describe(name, (function () {
          return List.iter((function (param) {
                        it(param[0], param[1]);
                        return /* () */0;
                      }), suite);
        }));
  return /* () */0;
}

function close_enough($staropt$star, a, b) {
  var threshold = $staropt$star ? $staropt$star[0] : 0.0000001;
  return +(Math.abs(a - b) < threshold);
}

function from_pair_suites(name, suites) {
  describe(name, (function () {
          return List.iter((function (param) {
                        var code = param[1];
                        it(param[0], (function () {
                                var match = Curry._1(code, /* () */0);
                                switch (match.tag | 0) {
                                  case 0 : 
                                      Assert.deepEqual(match[0], match[1]);
                                      return /* () */0;
                                  case 1 : 
                                      Assert.notDeepEqual(match[0], match[1]);
                                      return /* () */0;
                                  case 2 : 
                                      Assert.ok(Js_boolean.to_js_boolean(match[0]));
                                      return /* () */0;
                                  case 3 : 
                                      var b = match[1];
                                      var a = match[0];
                                      if (close_enough(/* None */0, a, b)) {
                                        return 0;
                                      } else {
                                        Assert.deepEqual(a, b);
                                        return /* () */0;
                                      }
                                  case 4 : 
                                      var b$1 = match[2];
                                      var a$1 = match[1];
                                      if (close_enough(/* Some */[match[0]], a$1, b$1)) {
                                        return 0;
                                      } else {
                                        Assert.deepEqual(a$1, b$1);
                                        return /* () */0;
                                      }
                                  case 5 : 
                                      Assert.throws(match[0]);
                                      return /* () */0;
                                  case 6 : 
                                      return assert_fail("failed");
                                  case 7 : 
                                      return assert_fail(match[0]);
                                  
                                }
                              }));
                        return /* () */0;
                      }), suites);
        }));
  return /* () */0;
}

exports.assert_equal     = assert_equal;
exports.assert_notequal  = assert_notequal;
exports.assert_ok        = assert_ok;
exports.assert_fail      = assert_fail;
exports.from_suites      = from_suites;
exports.close_enough     = close_enough;
exports.from_pair_suites = from_pair_suites;
/* assert Not a pure module */
