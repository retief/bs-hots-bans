// Generated by BUCKLESCRIPT VERSION 1.7.5, PLEASE EDIT WITH CARE
'use strict';

var Util        = require("../../common/util.js");
var Block       = require("bs-platform/lib/js/block.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var Bs_mocha    = require("../bs_mocha.js");
var Caml_obj    = require("bs-platform/lib/js/caml_obj.js");
var Caml_int32  = require("bs-platform/lib/js/caml_int32.js");
var Pervasives  = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

Bs_mocha.from_pair_suites("Util", /* :: */[
      /* tuple */[
        "flip works",
        (function () {
            return /* Eq */Block.__(0, [
                      2,
                      Util.flip((function (prim, prim$1) {
                              return prim - prim$1 | 0;
                            }), 1, 3)
                    ]);
          })
      ],
      /* :: */[
        /* tuple */[
          "const works",
          (function () {
              return /* Eq */Block.__(0, [
                        1,
                        Util.$$const(1, "foo")
                      ]);
            })
        ],
        /* :: */[
          /* tuple */[
            "% works",
            (function () {
                return /* Eq */Block.__(0, [
                          "5",
                          Util.$percent(Pervasives.string_of_int, (function (param) {
                                  return 2 + param | 0;
                                }), 3)
                        ]);
              })
          ],
          /* :: */[
            /* tuple */[
              "% works deeply",
              (function () {
                  return /* Eq */Block.__(0, [
                            -2,
                            Util.$percent((function (param) {
                                    return Util.$percent((function (param) {
                                                  return 4 - param | 0;
                                                }), (function (param) {
                                                  return (param << 1);
                                                }), param);
                                  }), (function (param) {
                                    return 1 + param | 0;
                                  }), 2)
                          ]);
                })
            ],
            /* :: */[
              /* tuple */[
                "on works",
                (function () {
                    return /* Eq */Block.__(0, [
                              3,
                              Util.on((function (prim, prim$1) {
                                      return prim - prim$1 | 0;
                                    }), Caml_format.caml_int_of_string, "5", "2")
                            ]);
                  })
              ],
              /* :: */[
                /* tuple */[
                  "neg works when true",
                  (function () {
                      return /* Eq */Block.__(0, [
                                /* false */0,
                                Util.neg((function (param) {
                                        return Caml_obj.caml_equal(1, param);
                                      }), 1)
                              ]);
                    })
                ],
                /* :: */[
                  /* tuple */[
                    "neg works when true",
                    (function () {
                        return /* Eq */Block.__(0, [
                                  /* true */1,
                                  Util.neg((function (param) {
                                          return Caml_obj.caml_equal(2, param);
                                        }), 1)
                                ]);
                      })
                  ],
                  /* [] */0
                ]
              ]
            ]
          ]
        ]
      ]
    ]);

function incr_if_pos(n) {
  var match = +(n > 0);
  if (match !== 0) {
    return /* Some */[n + 1 | 0];
  } else {
    return /* None */0;
  }
}

Bs_mocha.from_pair_suites("Util.List", /* :: */[
      /* tuple */[
        "hd works on non-empty lists",
        (function () {
            return /* Eq */Block.__(0, [
                      /* Some */[1],
                      Curry._1(Util.List[/* hd */32], /* :: */[
                            1,
                            /* :: */[
                              2,
                              /* :: */[
                                3,
                                /* [] */0
                              ]
                            ]
                          ])
                    ]);
          })
      ],
      /* :: */[
        /* tuple */[
          "hd doesn't error on empty lists",
          (function () {
              return /* Eq */Block.__(0, [
                        /* None */0,
                        Curry._1(Util.List[/* hd */32], /* [] */0)
                      ]);
            })
        ],
        /* :: */[
          /* tuple */[
            "tl works on non-empty lists",
            (function () {
                return /* Eq */Block.__(0, [
                          /* Some */[/* :: */[
                              2,
                              /* :: */[
                                3,
                                /* [] */0
                              ]
                            ]],
                          Curry._1(Util.List[/* tl */33], /* :: */[
                                1,
                                /* :: */[
                                  2,
                                  /* :: */[
                                    3,
                                    /* [] */0
                                  ]
                                ]
                              ])
                        ]);
              })
          ],
          /* :: */[
            /* tuple */[
              "tl works on empty lists",
              (function () {
                  return /* Eq */Block.__(0, [
                            /* None */0,
                            Curry._1(Util.List[/* tl */33], /* [] */0)
                          ]);
                })
            ],
            /* :: */[
              /* tuple */[
                "nth works on valid indexes",
                (function () {
                    return /* Eq */Block.__(0, [
                              /* Some */[2],
                              Curry._2(Util.List[/* nth */34], /* :: */[
                                    1,
                                    /* :: */[
                                      2,
                                      /* :: */[
                                        3,
                                        /* [] */0
                                      ]
                                    ]
                                  ], 1)
                            ]);
                  })
              ],
              /* :: */[
                /* tuple */[
                  "nth works when it goes off the end of the list",
                  (function () {
                      return /* Eq */Block.__(0, [
                                /* None */0,
                                Curry._2(Util.List[/* nth */34], /* :: */[
                                      1,
                                      /* :: */[
                                        2,
                                        /* :: */[
                                          3,
                                          /* [] */0
                                        ]
                                      ]
                                    ], 5)
                              ]);
                    })
                ],
                /* :: */[
                  /* tuple */[
                    "nth works on negative indexes",
                    (function () {
                        return /* Eq */Block.__(0, [
                                  /* None */0,
                                  Curry._2(Util.List[/* nth */34], /* :: */[
                                        1,
                                        /* :: */[
                                          2,
                                          /* :: */[
                                            3,
                                            /* [] */0
                                          ]
                                        ]
                                      ], -1)
                                ]);
                      })
                  ],
                  /* :: */[
                    /* tuple */[
                      "nth doesn't cause stack overflow",
                      (function () {
                          return /* Eq */Block.__(0, [
                                    /* Some */[1],
                                    Curry._2(Util.List[/* nth */34], Curry._2(Util.List[/* replicate */55], 10000, 1), 9999)
                                  ]);
                        })
                    ],
                    /* :: */[
                      /* tuple */[
                        "minimal append works",
                        (function () {
                            return /* Eq */Block.__(0, [
                                      /* :: */[
                                        1,
                                        /* :: */[
                                          2,
                                          /* :: */[
                                            3,
                                            /* :: */[
                                              4,
                                              /* :: */[
                                                5,
                                                /* [] */0
                                              ]
                                            ]
                                          ]
                                        ]
                                      ],
                                      Curry._2(Util.List[/* append */38], /* :: */[
                                            1,
                                            /* :: */[
                                              2,
                                              /* [] */0
                                            ]
                                          ], /* :: */[
                                            3,
                                            /* :: */[
                                              4,
                                              /* :: */[
                                                5,
                                                /* [] */0
                                              ]
                                            ]
                                          ])
                                    ]);
                          })
                      ],
                      /* :: */[
                        /* tuple */[
                          "append works",
                          (function () {
                              var lengths = Curry._2(Util.List[/* range */60], /* Some */[0], 11);
                              var expected_list = Curry._2(Util.List[/* replicate */55], 10, 1);
                              var expected = Curry._2(Util.List[/* map */42], (function (param) {
                                      return Util.$$const(expected_list, param);
                                    }), lengths);
                              var actual = Curry._3(Util.List[/* map2 */53], (function (n1, n2) {
                                      return Curry._2(Util.List[/* append */38], Curry._2(Util.List[/* replicate */55], n1, 1), Curry._2(Util.List[/* replicate */55], n2, 1));
                                    }), lengths, Curry._1(Util.List[/* rev */1], lengths));
                              return /* Eq */Block.__(0, [
                                        expected,
                                        actual
                                      ]);
                            })
                        ],
                        /* :: */[
                          /* tuple */[
                            "append doesn't cause stack overflow",
                            (function () {
                                return /* Eq */Block.__(0, [
                                          20000,
                                          Curry._1(Util.List[/* length */0], Curry._2(Util.List[/* append */38], Curry._2(Util.List[/* replicate */55], 10000, 1), Curry._2(Util.List[/* replicate */55], 10000, 1)))
                                        ]);
                              })
                          ],
                          /* :: */[
                            /* tuple */[
                              "minimal map works",
                              (function () {
                                  return /* Eq */Block.__(0, [
                                            /* :: */[
                                              2,
                                              /* :: */[
                                                3,
                                                /* :: */[
                                                  4,
                                                  /* [] */0
                                                ]
                                              ]
                                            ],
                                            Curry._2(Util.List[/* map */42], (function (param) {
                                                    return 1 + param | 0;
                                                  }), /* :: */[
                                                  1,
                                                  /* :: */[
                                                    2,
                                                    /* :: */[
                                                      3,
                                                      /* [] */0
                                                    ]
                                                  ]
                                                ])
                                          ]);
                                })
                            ],
                            /* :: */[
                              /* tuple */[
                                "map works",
                                (function () {
                                    var lengths = Curry._2(Util.List[/* range */60], /* Some */[1], 11);
                                    var f = function (x) {
                                      return x + 1 | 0;
                                    };
                                    var init = Curry._2(Util.List[/* map */42], (function (eta) {
                                            return Curry._2(Util.List[/* range */60], /* None */0, eta);
                                          }), lengths);
                                    var expected = Curry._2(Util.List[/* map */42], (function (n) {
                                            return Curry._2(Util.List[/* range */60], /* Some */[1], n + 1 | 0);
                                          }), lengths);
                                    var actual = Curry._2(Util.List[/* map */42], Curry._1(Util.List[/* map */42], f), init);
                                    return /* Eq */Block.__(0, [
                                              expected,
                                              actual
                                            ]);
                                  })
                              ],
                              /* :: */[
                                /* tuple */[
                                  "map doesn't cause stack overflow",
                                  (function () {
                                      return /* Eq */Block.__(0, [
                                                10000,
                                                Curry._1(Util.List[/* length */0], Curry._2(Util.List[/* map */42], (function (a) {
                                                            return a;
                                                          }), Curry._2(Util.List[/* replicate */55], 10000, 1)))
                                              ]);
                                    })
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "filter works",
                                    (function () {
                                        return /* Eq */Block.__(0, [
                                                  /* :: */[
                                                    1,
                                                    /* :: */[
                                                      2,
                                                      /* :: */[
                                                        3,
                                                        /* :: */[
                                                          4,
                                                          /* [] */0
                                                        ]
                                                      ]
                                                    ]
                                                  ],
                                                  Curry._2(Util.List[/* filter */45], (function (param) {
                                                          return Caml_obj.caml_lessthan(0, param);
                                                        }), /* :: */[
                                                        -1,
                                                        /* :: */[
                                                          1,
                                                          /* :: */[
                                                            -2,
                                                            /* :: */[
                                                              2,
                                                              /* :: */[
                                                                3,
                                                                /* :: */[
                                                                  4,
                                                                  /* :: */[
                                                                    0,
                                                                    /* [] */0
                                                                  ]
                                                                ]
                                                              ]
                                                            ]
                                                          ]
                                                        ]
                                                      ])
                                                ]);
                                      })
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "filter doesn't cause stack overflow",
                                      (function () {
                                          return /* Eq */Block.__(0, [
                                                    10000,
                                                    Curry._1(Util.List[/* length */0], Curry._2(Util.List[/* filter */45], (function (param) {
                                                                return Caml_obj.caml_lessthan(0, param);
                                                              }), Curry._2(Util.List[/* append */38], Curry._2(Util.List[/* replicate */55], 10000, 1), Curry._2(Util.List[/* replicate */55], 10000, 0))))
                                                  ]);
                                        })
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        "map_option works",
                                        (function () {
                                            return /* Eq */Block.__(0, [
                                                      /* :: */[
                                                        2,
                                                        /* :: */[
                                                          3,
                                                          /* :: */[
                                                            4,
                                                            /* :: */[
                                                              5,
                                                              /* [] */0
                                                            ]
                                                          ]
                                                        ]
                                                      ],
                                                      Curry._2(Util.List[/* map_option */48], incr_if_pos, /* :: */[
                                                            -1,
                                                            /* :: */[
                                                              1,
                                                              /* :: */[
                                                                -2,
                                                                /* :: */[
                                                                  2,
                                                                  /* :: */[
                                                                    3,
                                                                    /* :: */[
                                                                      4,
                                                                      /* :: */[
                                                                        0,
                                                                        /* [] */0
                                                                      ]
                                                                    ]
                                                                  ]
                                                                ]
                                                              ]
                                                            ]
                                                          ])
                                                    ]);
                                          })
                                      ],
                                      /* :: */[
                                        /* tuple */[
                                          "map_option doesn't cause stack overflow",
                                          (function () {
                                              return /* Eq */Block.__(0, [
                                                        10000,
                                                        Curry._1(Util.List[/* length */0], Curry._2(Util.List[/* map_option */48], incr_if_pos, Curry._2(Util.List[/* append */38], Curry._2(Util.List[/* replicate */55], 10000, 1), Curry._2(Util.List[/* replicate */55], 10000, 0))))
                                                      ]);
                                            })
                                        ],
                                        /* :: */[
                                          /* tuple */[
                                            "mapi works",
                                            (function () {
                                                return /* Eq */Block.__(0, [
                                                          Curry._2(Util.List[/* range */60], /* Some */[-1], 3),
                                                          Curry._2(Util.List[/* mapi */50], (function (prim, prim$1) {
                                                                  return prim - prim$1 | 0;
                                                                }), Curry._2(Util.List[/* replicate */55], 4, 1))
                                                        ]);
                                              })
                                          ],
                                          /* :: */[
                                            /* tuple */[
                                              "mapi doesn't cause stack overflow",
                                              (function () {
                                                  return /* Eq */Block.__(0, [
                                                            10000,
                                                            Curry._1(Util.List[/* length */0], Curry._2(Util.List[/* mapi */50], (function (prim, prim$1) {
                                                                        return prim + prim$1 | 0;
                                                                      }), Curry._2(Util.List[/* replicate */55], 10000, 1)))
                                                          ]);
                                                })
                                            ],
                                            /* :: */[
                                              /* tuple */[
                                                "fold_right works",
                                                (function () {
                                                    return /* Eq */Block.__(0, [
                                                              Curry._2(Util.List[/* range */60], /* None */0, 4),
                                                              Curry._3(Util.List[/* fold_right */51], (function (a, b) {
                                                                      return /* :: */[
                                                                              a,
                                                                              b
                                                                            ];
                                                                    }), Curry._2(Util.List[/* range */60], /* None */0, 4), /* [] */0)
                                                            ]);
                                                  })
                                              ],
                                              /* :: */[
                                                /* tuple */[
                                                  "fold_right doesn't cause stack overflow",
                                                  (function () {
                                                      return /* Eq */Block.__(0, [
                                                                10000,
                                                                Curry._3(Util.List[/* fold_right */51], (function (prim, prim$1) {
                                                                        return prim + prim$1 | 0;
                                                                      }), Curry._2(Util.List[/* replicate */55], 10000, 1), 0)
                                                              ]);
                                                    })
                                                ],
                                                /* :: */[
                                                  /* tuple */[
                                                    "concat works",
                                                    (function () {
                                                        return /* Eq */Block.__(0, [
                                                                  /* :: */[
                                                                    1,
                                                                    /* :: */[
                                                                      2,
                                                                      /* :: */[
                                                                        3,
                                                                        /* :: */[
                                                                          0,
                                                                          /* :: */[
                                                                            1,
                                                                            /* :: */[
                                                                              2,
                                                                              /* :: */[
                                                                                -1,
                                                                                /* :: */[
                                                                                  0,
                                                                                  /* :: */[
                                                                                    1,
                                                                                    /* [] */0
                                                                                  ]
                                                                                ]
                                                                              ]
                                                                            ]
                                                                          ]
                                                                        ]
                                                                      ]
                                                                    ]
                                                                  ],
                                                                  Curry._1(Util.List[/* concat */52], /* :: */[
                                                                        Curry._2(Util.List[/* range */60], /* Some */[1], 4),
                                                                        /* :: */[
                                                                          Curry._2(Util.List[/* range */60], /* None */0, 3),
                                                                          /* :: */[
                                                                            Curry._2(Util.List[/* range */60], /* Some */[-1], 2),
                                                                            /* [] */0
                                                                          ]
                                                                        ]
                                                                      ])
                                                                ]);
                                                      })
                                                  ],
                                                  /* :: */[
                                                    /* tuple */[
                                                      "concat on few long lists doesn't cause stack overflow",
                                                      (function () {
                                                          return /* Eq */Block.__(0, [
                                                                    30000,
                                                                    Curry._1(Util.List[/* length */0], Curry._1(Util.List[/* concat */52], Curry._2(Util.List[/* replicate */55], 3, Curry._2(Util.List[/* replicate */55], 10000, 1))))
                                                                  ]);
                                                        })
                                                    ],
                                                    /* :: */[
                                                      /* tuple */[
                                                        "concat on many short lists doesn't cause stack overflow",
                                                        (function () {
                                                            return /* Eq */Block.__(0, [
                                                                      30000,
                                                                      Curry._1(Util.List[/* length */0], Curry._1(Util.List[/* concat */52], Curry._2(Util.List[/* replicate */55], 10000, Curry._2(Util.List[/* replicate */55], 3, 1))))
                                                                    ]);
                                                          })
                                                      ],
                                                      /* :: */[
                                                        /* tuple */[
                                                          "map2 works",
                                                          (function () {
                                                              return /* Eq */Block.__(0, [
                                                                        Curry._2(Util.List[/* range */60], /* None */0, 4),
                                                                        Curry._3(Util.List[/* map2 */53], (function (prim, prim$1) {
                                                                                return prim - prim$1 | 0;
                                                                              }), Curry._2(Util.List[/* range */60], /* Some */[1], 5), Curry._2(Util.List[/* replicate */55], 4, 1))
                                                                      ]);
                                                            })
                                                        ],
                                                        /* :: */[
                                                          /* tuple */[
                                                            "map2 doesn't cause stack overflow",
                                                            (function () {
                                                                return /* Eq */Block.__(0, [
                                                                          10000,
                                                                          Curry._1(Util.List[/* length */0], Curry._3(Util.List[/* map2 */53], (function (prim, prim$1) {
                                                                                      return prim + prim$1 | 0;
                                                                                    }), Curry._2(Util.List[/* replicate */55], 10000, 1), Curry._2(Util.List[/* replicate */55], 10000, 1)))
                                                                        ]);
                                                              })
                                                          ],
                                                          /* :: */[
                                                            /* tuple */[
                                                              "fold_right2 works",
                                                              (function () {
                                                                  var inc_mult_sub = function (x, y, z) {
                                                                    return Caml_int32.imul(x + 1 | 0, y) - z | 0;
                                                                  };
                                                                  return /* Eq */Block.__(0, [
                                                                            10,
                                                                            Curry._4(Util.List[/* fold_right2 */54], inc_mult_sub, /* :: */[
                                                                                  1,
                                                                                  /* :: */[
                                                                                    2,
                                                                                    /* :: */[
                                                                                      3,
                                                                                      /* [] */0
                                                                                    ]
                                                                                  ]
                                                                                ], /* :: */[
                                                                                  2,
                                                                                  /* :: */[
                                                                                    3,
                                                                                    /* :: */[
                                                                                      4,
                                                                                      /* [] */0
                                                                                    ]
                                                                                  ]
                                                                                ], 1)
                                                                          ]);
                                                                })
                                                            ],
                                                            /* :: */[
                                                              /* tuple */[
                                                                "fold_right2 doesn't cause stack overflow",
                                                                (function () {
                                                                    return /* Eq */Block.__(0, [
                                                                              20000,
                                                                              Curry._4(Util.List[/* fold_right2 */54], (function (a, b, c) {
                                                                                      return (a + b | 0) + c | 0;
                                                                                    }), Curry._2(Util.List[/* replicate */55], 10000, 1), Curry._2(Util.List[/* replicate */55], 10000, 1), 0)
                                                                            ]);
                                                                  })
                                                              ],
                                                              /* :: */[
                                                                /* tuple */[
                                                                  "replicate works",
                                                                  (function () {
                                                                      return /* Eq */Block.__(0, [
                                                                                Curry._2(Util.List[/* replicate */55], 4, 1),
                                                                                /* :: */[
                                                                                  1,
                                                                                  /* :: */[
                                                                                    1,
                                                                                    /* :: */[
                                                                                      1,
                                                                                      /* :: */[
                                                                                        1,
                                                                                        /* [] */0
                                                                                      ]
                                                                                    ]
                                                                                  ]
                                                                                ]
                                                                              ]);
                                                                    })
                                                                ],
                                                                /* :: */[
                                                                  /* tuple */[
                                                                    "replicate doesn't cause stack overflow",
                                                                    (function () {
                                                                        return /* Eq */Block.__(0, [
                                                                                  10000,
                                                                                  Curry._1(Util.List[/* length */0], Curry._2(Util.List[/* replicate */55], 10000, 1))
                                                                                ]);
                                                                      })
                                                                  ],
                                                                  /* :: */[
                                                                    /* tuple */[
                                                                      "some_option finds stuff",
                                                                      (function () {
                                                                          return /* Eq */Block.__(0, [
                                                                                    /* Some */[2],
                                                                                    Curry._2(Util.List[/* some_option */56], incr_if_pos, /* :: */[
                                                                                          -1,
                                                                                          /* :: */[
                                                                                            0,
                                                                                            /* :: */[
                                                                                              1,
                                                                                              /* :: */[
                                                                                                4,
                                                                                                /* [] */0
                                                                                              ]
                                                                                            ]
                                                                                          ]
                                                                                        ])
                                                                                  ]);
                                                                        })
                                                                    ],
                                                                    /* :: */[
                                                                      /* tuple */[
                                                                        "some_option doesn't find stuff",
                                                                        (function () {
                                                                            return /* Eq */Block.__(0, [
                                                                                      /* None */0,
                                                                                      Curry._2(Util.List[/* some_option */56], incr_if_pos, Curry._2(Util.List[/* replicate */55], 4, -1))
                                                                                    ]);
                                                                          })
                                                                      ],
                                                                      /* :: */[
                                                                        /* tuple */[
                                                                          "some_option doesn't cause stack overflow",
                                                                          (function () {
                                                                              return /* Eq */Block.__(0, [
                                                                                        /* Some */[2],
                                                                                        Curry._2(Util.List[/* some_option */56], incr_if_pos, Curry._2(Util.List[/* append */38], Curry._2(Util.List[/* replicate */55], 10000, 0), /* :: */[
                                                                                                  1,
                                                                                                  /* [] */0
                                                                                                ]))
                                                                                      ]);
                                                                            })
                                                                        ],
                                                                        /* :: */[
                                                                          /* tuple */[
                                                                            "some finds stuff",
                                                                            (function () {
                                                                                return /* Eq */Block.__(0, [
                                                                                          /* true */1,
                                                                                          Curry._2(Util.List[/* some */57], (function (param) {
                                                                                                  return Caml_obj.caml_equal(1, param);
                                                                                                }), Curry._2(Util.List[/* range */60], /* Some */[-1], 4))
                                                                                        ]);
                                                                              })
                                                                          ],
                                                                          /* :: */[
                                                                            /* tuple */[
                                                                              "some doesn't find stuff",
                                                                              (function () {
                                                                                  return /* Eq */Block.__(0, [
                                                                                            /* false */0,
                                                                                            Curry._2(Util.List[/* some */57], (function (param) {
                                                                                                    return Caml_obj.caml_equal(1, param);
                                                                                                  }), Curry._2(Util.List[/* replicate */55], 10, 0))
                                                                                          ]);
                                                                                })
                                                                            ],
                                                                            /* :: */[
                                                                              /* tuple */[
                                                                                "some doesn't cause stack overflow",
                                                                                (function () {
                                                                                    return /* Eq */Block.__(0, [
                                                                                              /* true */1,
                                                                                              Curry._2(Util.List[/* some */57], (function (param) {
                                                                                                      return Caml_obj.caml_equal(1, param);
                                                                                                    }), Curry._2(Util.List[/* append */38], Curry._2(Util.List[/* replicate */55], 10000, 0), /* :: */[
                                                                                                        1,
                                                                                                        /* [] */0
                                                                                                      ]))
                                                                                            ]);
                                                                                  })
                                                                              ],
                                                                              /* :: */[
                                                                                /* tuple */[
                                                                                  "all returns true",
                                                                                  (function () {
                                                                                      return /* Eq */Block.__(0, [
                                                                                                /* true */1,
                                                                                                Curry._2(Util.List[/* all */58], (function (param) {
                                                                                                        return Caml_obj.caml_equal(1, param);
                                                                                                      }), Curry._2(Util.List[/* replicate */55], 5, 1))
                                                                                              ]);
                                                                                    })
                                                                                ],
                                                                                /* :: */[
                                                                                  /* tuple */[
                                                                                    "all returns false",
                                                                                    (function () {
                                                                                        return /* Eq */Block.__(0, [
                                                                                                  /* false */0,
                                                                                                  Curry._2(Util.List[/* all */58], (function (param) {
                                                                                                          return Caml_obj.caml_equal(1, param);
                                                                                                        }), /* :: */[
                                                                                                        1,
                                                                                                        /* :: */[
                                                                                                          1,
                                                                                                          /* :: */[
                                                                                                            1,
                                                                                                            /* :: */[
                                                                                                              0,
                                                                                                              /* :: */[
                                                                                                                1,
                                                                                                                /* [] */0
                                                                                                              ]
                                                                                                            ]
                                                                                                          ]
                                                                                                        ]
                                                                                                      ])
                                                                                                ]);
                                                                                      })
                                                                                  ],
                                                                                  /* :: */[
                                                                                    /* tuple */[
                                                                                      "all doesn't cause stack overflow",
                                                                                      (function () {
                                                                                          return /* Eq */Block.__(0, [
                                                                                                    /* false */0,
                                                                                                    Curry._2(Util.List[/* all */58], (function (param) {
                                                                                                            return Caml_obj.caml_equal(1, param);
                                                                                                          }), Curry._2(Util.List[/* append */38], Curry._2(Util.List[/* replicate */55], 10000, 1), /* :: */[
                                                                                                              0,
                                                                                                              /* [] */0
                                                                                                            ]))
                                                                                                  ]);
                                                                                        })
                                                                                    ],
                                                                                    /* :: */[
                                                                                      /* tuple */[
                                                                                        "merge works",
                                                                                        (function () {
                                                                                            return /* Eq */Block.__(0, [
                                                                                                      /* :: */[
                                                                                                        1,
                                                                                                        /* :: */[
                                                                                                          2,
                                                                                                          /* :: */[
                                                                                                            2,
                                                                                                            /* :: */[
                                                                                                              3,
                                                                                                              /* :: */[
                                                                                                                4,
                                                                                                                /* :: */[
                                                                                                                  5,
                                                                                                                  /* [] */0
                                                                                                                ]
                                                                                                              ]
                                                                                                            ]
                                                                                                          ]
                                                                                                        ]
                                                                                                      ],
                                                                                                      Curry._3(Util.List[/* merge */59], Caml_obj.caml_compare, /* :: */[
                                                                                                            1,
                                                                                                            /* :: */[
                                                                                                              2,
                                                                                                              /* :: */[
                                                                                                                3,
                                                                                                                /* :: */[
                                                                                                                  4,
                                                                                                                  /* [] */0
                                                                                                                ]
                                                                                                              ]
                                                                                                            ]
                                                                                                          ], /* :: */[
                                                                                                            2,
                                                                                                            /* :: */[
                                                                                                              5,
                                                                                                              /* [] */0
                                                                                                            ]
                                                                                                          ])
                                                                                                    ]);
                                                                                          })
                                                                                      ],
                                                                                      /* :: */[
                                                                                        /* tuple */[
                                                                                          "merge doesn't cause stack overflow",
                                                                                          (function () {
                                                                                              return /* Eq */Block.__(0, [
                                                                                                        20000,
                                                                                                        Curry._1(Util.List[/* length */0], Curry._3(Util.List[/* merge */59], Caml_obj.caml_compare, Curry._2(Util.List[/* replicate */55], 10000, 1), Curry._2(Util.List[/* replicate */55], 10000, 1)))
                                                                                                      ]);
                                                                                            })
                                                                                        ],
                                                                                        /* :: */[
                                                                                          /* tuple */[
                                                                                            "range works with no start",
                                                                                            (function () {
                                                                                                return /* Eq */Block.__(0, [
                                                                                                          /* :: */[
                                                                                                            0,
                                                                                                            /* :: */[
                                                                                                              1,
                                                                                                              /* :: */[
                                                                                                                2,
                                                                                                                /* :: */[
                                                                                                                  3,
                                                                                                                  /* :: */[
                                                                                                                    4,
                                                                                                                    /* [] */0
                                                                                                                  ]
                                                                                                                ]
                                                                                                              ]
                                                                                                            ]
                                                                                                          ],
                                                                                                          Curry._2(Util.List[/* range */60], /* None */0, 5)
                                                                                                        ]);
                                                                                              })
                                                                                          ],
                                                                                          /* :: */[
                                                                                            /* tuple */[
                                                                                              "range works with start",
                                                                                              (function () {
                                                                                                  return /* Eq */Block.__(0, [
                                                                                                            /* :: */[
                                                                                                              2,
                                                                                                              /* :: */[
                                                                                                                3,
                                                                                                                /* :: */[
                                                                                                                  4,
                                                                                                                  /* :: */[
                                                                                                                    5,
                                                                                                                    /* [] */0
                                                                                                                  ]
                                                                                                                ]
                                                                                                              ]
                                                                                                            ],
                                                                                                            Curry._2(Util.List[/* range */60], /* Some */[2], 6)
                                                                                                          ]);
                                                                                                })
                                                                                            ],
                                                                                            /* :: */[
                                                                                              /* tuple */[
                                                                                                "return is empty when start = stop",
                                                                                                (function () {
                                                                                                    return /* Eq */Block.__(0, [
                                                                                                              /* [] */0,
                                                                                                              Curry._2(Util.List[/* range */60], /* Some */[1], 1)
                                                                                                            ]);
                                                                                                  })
                                                                                              ],
                                                                                              /* :: */[
                                                                                                /* tuple */[
                                                                                                  "invalid range params return empty list",
                                                                                                  (function () {
                                                                                                      return /* Eq */Block.__(0, [
                                                                                                                /* [] */0,
                                                                                                                Curry._2(Util.List[/* range */60], /* Some */[5], 1)
                                                                                                              ]);
                                                                                                    })
                                                                                                ],
                                                                                                /* :: */[
                                                                                                  /* tuple */[
                                                                                                    "range doesn't cause stack overflow",
                                                                                                    (function () {
                                                                                                        return /* Eq */Block.__(0, [
                                                                                                                  10000,
                                                                                                                  Curry._1(Util.List[/* length */0], Curry._2(Util.List[/* range */60], /* None */0, 10000))
                                                                                                                ]);
                                                                                                      })
                                                                                                  ],
                                                                                                  /* [] */0
                                                                                                ]
                                                                                              ]
                                                                                            ]
                                                                                          ]
                                                                                        ]
                                                                                      ]
                                                                                    ]
                                                                                  ]
                                                                                ]
                                                                              ]
                                                                            ]
                                                                          ]
                                                                        ]
                                                                      ]
                                                                    ]
                                                                  ]
                                                                ]
                                                              ]
                                                            ]
                                                          ]
                                                        ]
                                                      ]
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]);

exports.incr_if_pos = incr_if_pos;
/*  Not a pure module */
