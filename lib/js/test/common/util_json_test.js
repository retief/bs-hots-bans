// Generated by BUCKLESCRIPT VERSION 1.7.5, PLEASE EDIT WITH CARE
'use strict';

var Block       = require("bs-platform/lib/js/block.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var Bs_mocha    = require("../bs_mocha.js");
var Util_json   = require("../../common/util/util_json.js");
var Util_option = require("../../common/util/util_option.js");

function make(i, f, s, arr, arr2, lst) {
  return /* record */[
          /* arr */arr,
          /* arr2 */arr2,
          /* lst */lst,
          /* i */i,
          /* f */f,
          /* s */s
        ];
}

var FloatArray = Util_json.$$Array([
      Util_json.Float[0],
      Util_json.Float[1]
    ]);

var IntList = Util_json.List([
      Util_json.Int[0],
      Util_json.Int[1]
    ]);

function from_json(j) {
  return Util_option.$great$great$eq(Util_json.jdict_of_json(j), (function (d) {
                return Curry._2(Util_option.$less$star$great, Curry._2(Util_option.$less$star$great, Curry._2(Util_option.$less$star$great, Curry._2(Util_option.$less$star$great, Curry._2(Util_option.$less$star$great, Curry._2(Util_option.$less$$great, make, Curry._2(Util_json.Int[/* get */4], d, "i")), Curry._2(Util_json.Float[/* get */4], d, "f")), Curry._2(Util_json.$$String[/* get */4], d, "s")), Util_json.get_array(from_json, d, "arr")), Curry._2(FloatArray[/* get */4], d, "arr2")), Curry._2(IntList[/* get */4], d, "lst"));
              }));
}

function to_json(param) {
  return Util_json.jobj_of_list(/* :: */[
              /* tuple */[
                "i",
                Curry._1(Util_json.Int[/* to_json */1], param[/* i */3])
              ],
              /* :: */[
                /* tuple */[
                  "s",
                  Curry._1(Util_json.$$String[/* to_json */1], param[/* s */5])
                ],
                /* :: */[
                  /* tuple */[
                    "arr",
                    Util_json.jarray_of_array(to_json, param[/* arr */0])
                  ],
                  /* :: */[
                    /* tuple */[
                      "arr2",
                      Curry._1(FloatArray[/* to_json */1], param[/* arr2 */1])
                    ],
                    /* :: */[
                      /* tuple */[
                        "lst",
                        Curry._1(IntList[/* to_json */1], param[/* lst */2])
                      ],
                      /* :: */[
                        /* tuple */[
                          "f",
                          Curry._1(Util_json.Float[/* to_json */1], param[/* f */4])
                        ],
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]);
}

var Base = /* module */[
  /* make */make,
  /* FloatArray */FloatArray,
  /* IntList */IntList,
  /* from_json */from_json,
  /* to_json */to_json
];

var include = Util_json.Extend([
      from_json,
      to_json
    ]);

var from_json$1 = include[0];

var to_json$1 = include[1];

var parse = include[2];

var stringify = include[3];

var Type1_005 = /* get */include[4];

var Type1_006 = /* @. */include[5];

var Type1 = /* module */[
  /* Base */Base,
  /* from_json */from_json$1,
  /* to_json */to_json$1,
  /* parse */parse,
  /* stringify */stringify,
  Type1_005,
  Type1_006
];

var example_t1_000 = /* arr : array */[
  /* record */[
    /* arr : array */[],
    /* arr2 : float array */[3],
    /* lst : :: */[
      1,
      /* [] */0
    ],
    /* i */3,
    /* f */1.3,
    /* s */"asdfs"
  ],
  /* record */[
    /* arr : array */[],
    /* arr2 : float array */[4],
    /* lst : :: */[
      2,
      /* :: */[
        3,
        /* [] */0
      ]
    ],
    /* i */5,
    /* f */1.5,
    /* s */"fdsa"
  ]
];

var example_t1_001 = /* arr2 : float array */[
  1,
  2
];

var example_t1_002 = /* lst : :: */[
  4,
  /* :: */[
    5,
    /* [] */0
  ]
];

var example_t1 = /* record */[
  example_t1_000,
  example_t1_001,
  example_t1_002,
  /* i */1,
  /* f */1.2,
  /* s */"asdf"
];

Bs_mocha.from_pair_suites("Util.Json", /* :: */[
      /* tuple */[
        "Type1 from_json/to_json works",
        (function () {
            return /* Eq */Block.__(0, [
                      /* Some */[example_t1],
                      Curry._1(from_json$1, Curry._1(to_json$1, example_t1))
                    ]);
          })
      ],
      /* :: */[
        /* tuple */[
          "Type1 parse/stringify works",
          (function () {
              return /* Eq */Block.__(0, [
                        /* Some */[example_t1],
                        Curry._1(parse, Curry._1(stringify, example_t1))
                      ]);
            })
        ],
        /* [] */0
      ]
    ]);

exports.Type1      = Type1;
exports.example_t1 = example_t1;
/* FloatArray Not a pure module */
