// Generated by BUCKLESCRIPT VERSION 1.7.5, PLEASE EDIT WITH CARE
'use strict';

var Block        = require("bs-platform/lib/js/block.js");
var Curry        = require("bs-platform/lib/js/curry.js");
var Js_dict      = require("bs-platform/lib/js/js_dict.js");
var Js_json      = require("bs-platform/lib/js/js_json.js");
var Bs_mocha     = require("../bs_mocha.js");
var Util_json    = require("../../common/util_json.js");
var Util_option  = require("../../common/util_option.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

function from_json(j) {
  return Util_option.$great$great$eq(Js_json.decodeObject(j), (function (d) {
                return Util_option.$great$great$eq(Util_option.$great$great$eq(Js_primitive.undefined_to_opt(d["i"]), Util_json.Int[/* from_json */0]), (function (i) {
                              return Util_option.$great$great$eq(Util_option.$great$great$eq(Js_primitive.undefined_to_opt(d["s"]), Util_json.$$String[/* from_json */0]), (function (s) {
                                            return Util_option.$great$great$eq(Util_option.$great$great$eq(Js_primitive.undefined_to_opt(d["arr"]), (function (param) {
                                                              return Util_json.array_of_jarray(from_json, param);
                                                            })), (function (arr) {
                                                          var partial_arg = Util_json.Int[/* from_json */0];
                                                          return Util_option.$great$great$eq(Util_option.$great$great$eq(Js_primitive.undefined_to_opt(d["lst"]), (function (param) {
                                                                            return Util_json.list_of_jarray(partial_arg, param);
                                                                          })), (function (lst) {
                                                                        return Util_option.$great$great$eq(Util_option.$great$great$eq(Js_primitive.undefined_to_opt(d["f"]), Util_json.Float[/* from_json */0]), (function (f) {
                                                                                      return Util_option.pure(/* record */[
                                                                                                  /* arr */arr,
                                                                                                  /* lst */lst,
                                                                                                  /* i */i,
                                                                                                  /* f */f,
                                                                                                  /* s */s
                                                                                                ]);
                                                                                    }));
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

function to_json(param) {
  return Js_dict.fromList(/* :: */[
              /* tuple */[
                "i",
                Curry._1(Util_json.Int[/* to_json */1], param[/* i */2])
              ],
              /* :: */[
                /* tuple */[
                  "s",
                  Curry._1(Util_json.$$String[/* to_json */1], param[/* s */4])
                ],
                /* :: */[
                  /* tuple */[
                    "arr",
                    Util_json.jarray_of_array(to_json, param[/* arr */0])
                  ],
                  /* :: */[
                    /* tuple */[
                      "lst",
                      Util_json.jarray_of_list(Util_json.Int[/* to_json */1], param[/* lst */1])
                    ],
                    /* :: */[
                      /* tuple */[
                        "f",
                        Curry._1(Util_json.Float[/* to_json */1], param[/* f */3])
                      ],
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]);
}

var Base = /* module */[
  /* from_json */from_json,
  /* to_json */to_json
];

var include = Util_json.Json_make(Base);

var from_json$1 = include[0];

var to_json$1 = include[1];

var parse = include[2];

var stringify = include[3];

var Type1 = /* module */[
  /* Base */Base,
  /* from_json */from_json$1,
  /* to_json */to_json$1,
  /* parse */parse,
  /* stringify */stringify
];

var example_t1_000 = /* arr : array */[
  /* record */[
    /* arr : array */[],
    /* lst : :: */[
      1,
      /* [] */0
    ],
    /* i */3,
    /* f */1.3,
    /* s */"asdfs"
  ],
  /* record */[
    /* arr : array */[],
    /* lst : :: */[
      2,
      /* :: */[
        3,
        /* [] */0
      ]
    ],
    /* i */5,
    /* f */1.5,
    /* s */"fdsa"
  ]
];

var example_t1_001 = /* lst : :: */[
  4,
  /* :: */[
    5,
    /* [] */0
  ]
];

var example_t1 = /* record */[
  example_t1_000,
  example_t1_001,
  /* i */1,
  /* f */1.2,
  /* s */"asdf"
];

Bs_mocha.from_pair_suites("Util.Json", /* :: */[
      /* tuple */[
        "Type1 from_json/to_json works",
        (function () {
            return /* Eq */Block.__(0, [
                      /* Some */[example_t1],
                      Curry._1(from_json$1, Curry._1(to_json$1, example_t1))
                    ]);
          })
      ],
      /* :: */[
        /* tuple */[
          "Type1 parse/stringify works",
          (function () {
              return /* Eq */Block.__(0, [
                        /* Some */[example_t1],
                        Curry._1(parse, Curry._1(stringify, example_t1))
                      ]);
            })
        ],
        /* [] */0
      ]
    ]);

exports.Type1      = Type1;
exports.example_t1 = example_t1;
/* include Not a pure module */
